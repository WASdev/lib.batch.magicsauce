/*
 * Copyright 2015 IBM Corp.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.ibm.doctorbatch.magicsauce.mvs;

import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.ibm.doctorbatch.magicsauce.BatchException;
import com.ibm.doctorbatch.magicsauce.RecordParser;
import com.ibm.etools.marshall.RecordBytes;

import static com.ibm.doctorbatch.magicsauce.mvs.Constants.*;

/**
 * <p>The RecordBytesParser is a RecordParser with a record type of byte[], and an object type that 
 * must extend com.ibm.etools.marshall.RecordBytes.</p>
 * 
 * <p>This RecordParser implementation may be used when your record type's Java Class implements the 
 * com.ibm.etools.marshall.RecordBytes interface, so as those classes generated by the Rational
 * Application Developer's CICS J2C Data Binding wizard, or the IBM JZOS RecordFieldGenerator 
 * utility.</p> 
 * 
 * <p>To use this record parser, you must specify the fully qualified class name of your record type 
 * class in the xJCL job-step properties as the value of the "MVS_RECORDBYTES_CLASSNAME" property.</p>
 * 
 * <p>This record parser creates a single instance of the RecordBytes instance during initialization, 
 * and re-uses it throughout the batch job step by calling its "setBytes()" method during in 
 * getRecord()</p>
 * 
 * <p>Use of this class is compatible with PJM. However, since the underlying instance is reused through
 * the entire job run, the instance returned by "getRecord()" should never be cached or stored between 
 * invocations.</p>
 * 
 * @author Timothy C. Fanelli (tfanelli@us.ibm.com, tim@fanel.li, doc@torbat.ch)
 *
 */
public class RecordBytesParser<T extends RecordBytes> implements RecordParser<T, byte[]> {
	private String className;
	private Class<?> clazz;
	private T instance;
	
	private final static Logger LOG = Logger.getLogger( RecordBytesParser.class.getCanonicalName() );

	/**
	 * Initializes an instance of the RecordBytes class for use through this job step. The class name
	 * to instantiate must be specified in the MVS_RECORDBYTES_CLASSNAME" xJCL property.
	 */
	@SuppressWarnings("unchecked")
	public void initialize( Properties p ) {
		this.className = p.getProperty( MVS_RECORDBYTES_CLASSNAME );
		
		try {
			this.clazz = Class.forName(className);
			this.instance = (T) this.clazz.newInstance();
		} catch (ClassNotFoundException e) {
			LOG.log( Level.SEVERE, "Could not find record bytes implementation class " + className + " for use with RecordBytesParser.", e );
			throw new BatchException( "Could not initialize the RecordBytesParser because required class " + className + " was not found. Please check the xJCL configuration, and try again.", e );
		} catch (IllegalAccessException e) {
			throw new BatchException( "Could not initialize the RecordBytesParser because required class " + className + " could not be instantiated.", e );
		} catch (InstantiationException e) {
			throw new BatchException( "Could not initialize the RecordBytesParser because required class " + className + " could not be instantiated.", e );
		}
	}

	/**
	 * Overwrites the byte buffer of the RecordBytes instance and returns it for
	 * processing.
	 */
	@Override
	public T parseRecordToObject(byte[] bytes) {
		this.instance.setBytes( bytes );
		return this.instance;
	}

	/**
	 * Returns the current byte buffer of the RecordBytes instance.
	 */
	@Override
	public byte[] parseObjectToRecord(T record) {
		return record.getBytes();
	}

}
